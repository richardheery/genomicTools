basename(test.bw)
basename("test.bw")
tools::file_path_sans_ext("test.bw")
tools::file_ext("test.bw")
tools::file_ext("this/is/test.bw")
tools::file_path_sans_ext("this/is/test.bw")
library(devtools)
document()
document()
use_package("rtracklayer")
?seqlevels
build()
library(dplyr)
getwd()
?system.file
build()
build()
document()
build()
?library
library(devtools)
getwd()
document()
document()
build()
?rtracklayer::export.bw
?seqinfo
getwd()
library(devtools)
Document()
document()
build()
input_filepath = "~/pagani_bigwigs/organoids/bulk_chipseq/results/H3K27Ac/original_directories/SQ_1990/macs/SQ_1990_FE.temp.bg"
to_genome_build = "hg19"
# Load correct chain file for relevent genome build
if (to_genome_build == "hg19"){chain_file = system.file("extdata", "hg38ToHg19.over.chain", package = "genomeTools")
} else if (to_genome_build == "hg38"){chain_file = system.file("extdata", "hg19ToHg38.over.chain", package = "genomeTools")}
paste(system.file("extdata", "liftOver", package = "genomeTools"), input_filepath, chain_file, gsub("temp.bg", "liftover.temp.bg", input_filepath), "/dev/null")
current_file
input_filepath = "~/pagani_bigwigs/organoids/bulk_chipseq/results/H3K27Ac/original_directories/SQ_1990/macs/SQ_1990_FE.bw"
# Set current working file to the input file
current_file = input_filepath
input_type = "bw"
# If input type is bw, convert to a bedGraph
if(input_type == "bw"){
#system(paste(system.file("extdata", "bigWigToBedGraph", package = "genomeTools"), input_filepath, gsub(input_extension, "temp.bg", input_filepath)))
current_file = gsub(input_extension, "temp.bg", input_filepath)
}
# Get extension of input file
input_extension = tools::file_ext(input_filepath)
# If input type is bw, convert to a bedGraph
if(input_type == "bw"){
#system(paste(system.file("extdata", "bigWigToBedGraph", package = "genomeTools"), input_filepath, gsub(input_extension, "temp.bg", input_filepath)))
current_file = gsub(input_extension, "temp.bg", input_filepath)
}
current_file
system.file("extdata", "hg38_chrom_size.tsv", package = "genomeTools")
system.file("extdata", "hg19_chrom_size.tsv", package = "genomeTools")
basename( "/home/richard/R/x86_64-pc-linux-gnu-library/4.0/genomeTools/extdata/hg19_chrom_size.tsv")
tools::file_ext(basename( "/home/richard/R/x86_64-pc-linux-gnu-library/4.0/genomeTools/extdata/hg19_chrom_size.tsv"))
input_filepat
input_filepath
# Get extension of input file
input_extension = paste0(".", tools::file_ext(input_filepath))
input_extension
input_filepath = "~/pagani_bigwigs/organoids/bulk_chipseq/results/H3K27Ac/original_directories/SQ_1990/macs/SQ_1990_FE.bw"
input_filetype = "bw"
output_filetype = "bg"
to_genome_file = "hg19"
input_filepath = "~/pagani_bigwigs/organoids/bulk_chipseq/results/H3K27Ac/original_directories/SQ_1990/macs/SQ_1990_FE.bw"
input_filetype = "bw"
output_filetype = "bw"
to_genome_file = "hg19"
output_filename = "my_test_liftover.bw"
# Check that allowed values are entered for to_genome_build and output_filetype
match.arg(arg = input_filetype, choices = c("bw", "bg"), several.ok = F)
match.arg(arg = output_filetype, choices = c("bw", "bg"), several.ok = F)
match.arg(arg = to_genome_build, choices = c("hg19", "hg38"), several.ok = F)
to_genome_build = "hg19"
match.arg(arg = to_genome_build, choices = c("hg19", "hg38"), several.ok = F)
# Set current working file to the input file
current_file = input_filepath
# Load correct chain file for relevent genome build
if (to_genome_build == "hg19"){
chain_file = system.file("extdata", "hg38ToHg19.over.chain", package = "genomeTools")
chrom_sizes = system.file("extdata", "hg19_chrom_size.tsv", package = "genomeTools")
} else if (to_genome_build == "hg38"){
chain_file = system.file("extdata", "hg19ToHg38.over.chain", package = "genomeTools")
chrom_sizes = system.file("extdata", "hg38_chrom_size.tsv", package = "genomeTools")
}
chain_file
chrom_sizes
# Get extension of input file
input_extension = paste0(".", tools::file_ext(input_filepath))
input_extension
# If input type is bw, convert to a bedGraph
system.time({if(input_filetype == "bw"){
system(paste(system.file("extdata", "bigWigToBedGraph", package = "genomeTools"), input_filepath, basename(gsub(input_extension, "__tempfile.bg", input_filepath))))
current_file = basename(gsub(input_extension, "temp.bg", input_filepath))
}})
current_file
# If input type is bw, convert to a bedGraph
system.time({if(input_filetype == "bw"){
system(paste(system.file("extdata", "bigWigToBedGraph", package = "genomeTools"), input_filepath, basename(gsub(input_extension, "__tempfile.bg", input_filepath))))
current_file = basename(gsub(input_extension, "__tempfile.bg", input_filepath))
}})
current_file
ls()
basename(gsub(input_extension, "__tempfile.bg", input_filepath))
list.files()
system("head SQ_1990_FE__tempfile.bg")
basename(gsub(input_extension, "liftover.temp.bg", current_file))
basename(gsub(input_extension, "_liftover__tempfile.bg", input_filepath))
# LiftOver bedGraph
system.time({system(paste(system.file("extdata", "liftOver", package = "genomeTools"), current_file, chain_file, basename(gsub(input_extension, "_liftover__tempfile.bg", input_filepath)), "/dev/null"))
current_file = basename(gsub(input_extension, "_liftover__tempfile.bg", input_filepath))})
1332.228/60
current_file
# Remove duplicated regions post liftover and sort
system.time({system(paste(system.file("extdata", "bedRemoveOverlap", package = "genomeTools"), current_file, gsub("_liftover__tempfile.bg", "liftover_duplicated_regions_removed__tempfile.bg")))})
# Remove duplicated regions post liftover and sort
system.time({system(paste(system.file("extdata", "bedRemoveOverlap", package = "genomeTools"), current_file, gsub("_liftover__tempfile.bg", "liftover_duplicated_regions_removed__tempfile.bg", current_file)))})
# Remove duplicated regions post liftover and sort
system.time({system(paste(system.file("extdata", "bedRemoveOverlap", package = "genomeTools"), current_file, gsub("_liftover__tempfile.bg", "liftover_duplicated_regions_removed__tempfile.bg", current_file)))})
# Remove duplicated regions post liftover and sort
system.time({system(paste("sort -k1,1 -k2,2n -o", current_file, current_file))})
system.time({system(paste(system.file("extdata", "bedRemoveOverlap", package = "genomeTools"), current_file, gsub("_liftover__tempfile.bg", "liftover_duplicated_regions_removed__tempfile.bg", current_file)))})
current_file
getwd()
current_file = gsub("_liftover__tempfile.bg", "liftover_duplicated_regions_removed__tempfile.bg", current_file)
current_file
# If output_filetype is bg, can return current_file. If output_filetype is bw, need to convert it back to a bigwig
system.time({if(output_filetype == "bg"){
system(paste("mv", current_file, output_filename))
} else if(output_filetype == "bw"){
system(paste(system.file("extdata", "bedGraphToBigWig", package = "genomeTools"), current_file, chrom_sizes, output_filename))
}})
# Remove temporary files
system("rm *__tempfile*")
library(devtools)
document()
build()
df = data.frame(a = c("a", NA, "c"), d = c(NA, NA, "f"))
df
is.na(df)
complete.cases(is.na(df))
complete.cases(df)
rowSums(is.na(df))
rowSums(is.na(df)) = ncol(df)
rowSums(is.na(df)) == ncol(df)
basename(tools::file_path_sans_ext("a/b/c/d/adfadsfas.bw"))
getwd()
library(devtools)
document()
document()
build()
library(devtools)
document()
document()
document()
document()
build()
q()
# Load required packages
library(biomaRt)
# Get gene mart for hg38 version 103
gene_mart_hg38 = useEnsembl("ENSEMBL", dataset="hsapiens_gene_ensembl", version = 103)
# Download a data.frame with ensembl gene IDs, HGNC IDs and entrezgene IDs. Downloaded 2/4/21
system.time({gene_match_df = getBM(mart = gene_mart_hg38,
attributes = c("ensembl_gene_id", "hgnc_id", "hgnc_symbol", "entrezgene_id"))})
head(gene_match_df)
# Make entrezgene_id a character vector
gene_match_df$entrezgene_id = as.character(gene_match_df$entrezgene_id)
head(gene_match_df)
# Remove HGNC: from start of HGNC IDs
gene_match_df$hgnc_id = gsub("HGNC:", "", gene_match_df$hgnc_id)
# Set HGNC IDs and symbols with a value of "" = to NA
gene_match_df$hgnc_id[!nzchar(gene_match_df$hgnc_id)] = NA
gene_match_df$hgnc_symbol[!nzchar(gene_match_df$hgnc_symbol)] = NA
# Remove rows where three of the entries have NA values
gene_match_df = gene_match_df[which(apply(gene_match_df, 1, function(x) sum(is.na(x))) < 3), ]
head(gene_match_df)
head(split(gene_match_df$hgnc_id, gene_match_df$ensembl_gene_id))
library(devtools)
gene_conversion_list = readRDS("~/my_packages/genes/data/gene_conversion_list.Rdata")
load("~/my_packages/genes/data/gene_conversion_list.Rdata")
head(gene_conversion_list$ensembl_id_hgnc_id)
use_data(gene_conversion_list)
document()
build()
as.character("tp53")
as.character(1234)
as.character(c(1234, 567))
library(devtools)
document()
build()
library(HGNChelper)
?getCurrentHumanMap
?checkGeneSymbols
checkGeneSymbols("TP53", map = NULL)
checkGeneSymbols("P53", map = NULL)
hgnchelper_map_01_09_2020 = readRDS("~/genes/hgnchelper_map_01_09_2020.rds")
library(devtools)
list.files()
save(list = c(load("sysdata.rda") , "hgnchelper_map_01_09_2020"), file = "sysdata.rda")
c(load("sysdata.rda"))
document()
document()
getwd()
document()
library(devtools)
document()
load("sysdata.rda")
head(hgnchelper_map_01_09_2020)
document()
getwd()
library(devtools)
document()
build()
q()
rnorm(1)
rnorm(1, 1, 0)
rnorm(100, 1, 0)
library(regioneR)
basename("test/tester/file.txt")
file_path_sans_ext("test/tester/file.txt")
tools::file_path_sans_ext("test/tester/file.txt")
basename(tools::file_path_sans_ext("test/tester/file.txt"))
?system
bg = "~/mounts/workstation_mount/cpgea/new/all_bedgraphs_hg38/N1_WGBS.CG.bg.gz"
system(paste("gzip -l", bg), intern = T)
system("echo $?")
bg2 = "~/mounts/workstation_mount/cpgea/new/all_bedgraphs_hg38/test.bg"
# Check if file is compressed
system(paste("gzip -l", bg2), intern = T)
# Check if file is compressed
system(paste("gzip -l", bg2))
# Check if file is compressed
system(paste("gzip -l", bg2))
tryCatch({blah}, error = function(x) NA)
tryCatch({blah}, error = function(xxx) NA)
tryCatch({blah}, error = function(5) NA)
tryCatch({blah}, error = function(x) NA)
?tryCatch
tryCatch({blah}, error = function(x) x)
tryCatch({blah}, error = function(x) message(x))
tryCatch(expr = {blah}, error = function(x) {message(x) NA})
blah
tryCatch(expr = {blah}, error = function(x) {message(x); NA})
tryCatch(expr = {blah}, error = function(x) {message(x); NA})
tryCatch(expr = {blah}, error = function(x) {message(x);
NA})
tryCatch(expr = {blah}, error = function(x) {NA; message(x)})
test = tryCatch(expr = {blah}, error = function(x) {NA; message(x)})
test
tryCatch(expr = {blah}, error = function(x) {NA; message(x)})
tryCatch(expr = {blah}, error = function(x) {message(x); NA})
test = tryCatch(expr = {blah}, error = function(x) {message(x); NA})
test
tryCatch(system(paste("gzip -l", bg2)), warning=function(x), T)
tryCatch(system(paste("gzip -l", bg2)), warning=function(x) T)
x=tryCatch(system(paste("gzip -l", bg2)), warning=function(x) T)
x
x=tryCatch(system(paste("gzip -l", bg)), warning=function(x) T)
x
x = system(paste("gzip -l", bg2))
x
x = system(paste("gzip -l", bg))
x
if(0){"t"}
if(1){"t"}
basename(tools::file_path_sans_ext("test/tester/file.bg.gz"))
tools::file_ext("test/tester/file.bg.gz")
name = tools::file_path_sans_ext(gsub(".gz", "", bg))
name
bg
name = basename(tools::file_path_sans_ext(gsub(".gz", "", bg)))
name
temp = paste(name, "_convert_bedgraphs_to_bigwigs_temp.bg")
temp
temp = paste0(name, "_convert_bedgraphs_to_bigwigs_temp.bg")
temp
getwd()
system(paste("zcat", bg, ">", temp))
temp = tempfile()
temp
?tempfile
temp = tempfile(fileext = ".bg")
temp
bg_extension = tools::file_ext(bg)
bg_extension
gsub(".gz", "", "test.bg")
bg = "~/mounts/workstation_mount/cpgea/new/all_bedgraphs_hg38/N1_WGBS.CG.bg.gz"
name = basename(gsub(".gz", "", bg))
name
tools::file_ext(bg) == "gz"
temp = tempfile(fileext = ".bg")
temp
system(paste("zcat", bg, ">", temp))
bg = temp
bg_extension = tools::file_ext(bg)
bg_extension
output_name = gusb(bg_extension, "bw", name)
output_name = gsub(bg_extension, "bw", name)
output_name
ls()
list.files()
output_dir = "."
system.time({system(paste("bedGraphToBigWig", bg, chrom_sizes_file, paste(output_dir, output_name, sep = "/")))})
genome_build = "hg38"
# Set correct chromosome sizes file for genome build
if(genome_build == "hg19"){
chrom_sizes_file = "~/genomes/genome_files/hg19_chrom_size.tsv"
} else {
chrom_sizes_file = "~/genomes/genome_files/hg38_chrom_size.tsv"
}
chrom_sizes_file
system.time({system(paste("bedGraphToBigWig", bg, chrom_sizes_file, paste(output_dir, output_name, sep = "/")))})
paste("bedGraphToBigWig", bg, chrom_sizes_file, paste(output_dir, output_name, sep = "/"))
system.time({system(paste("bedGraphToBigWig", bg, chrom_sizes_file, paste(output_dir, output_name, sep = "/")))})
list.files()
library(rtracklayer)
x = import.bw("N1_WGBS.CG.bw")
x
y = import.bedGraph(bg)
head(y)
head(x)
head(y)
output_dir
output_dir = "test"
dir.create(output_dir)
dir.create(output_dir)
dir.create(output_dir, showWarnings = F)
dir.create(output_dir, showWarnings = F)
dir.create(output_dir, showWarnings = F)
bg = "~/mounts/workstation_mount/cpgea/new/all_bedgraphs_hg38/test.bg"
name = basename(gsub(".gz", "", bg))
name
# If file is compressed, create a temporary uncompressed file
if(tools::file_ext(bg) == "gz"){
temp = tempfile(fileext = ".bg")
system(paste("zcat", bg, ">", temp))
bg = temp
}
bg
unlink("blah")
unlink("blahadfasdfas")
unlink("fakefile123")
bg
bg_extension = tools::file_ext(bg)
bg_extension
output_name = gsub(bg_extension, "bw", name)
output_name
output_dir
system(paste("bedGraphToBigWig", bg, chrom_sizes_file, paste(output_dir, output_name, sep = "/")))
list.files("test")
epd = readRDS("~/promoters/epd/created_epd_objects/epd_pcg_promoters_autosomal_overlapping_probes.rds")
small = resize(epd, 150, fix = "center")
head(small)
head(epd)
mcols(small) = NULL
head(small)
head(intersect(small, epd))
head(intersect(epd, small))
head(sapply(epd, function(x) intersect(x, small)))
head(GRangesList(epd))
head(split(epd, epd))
head(split(epd, as.factor(epd)))
head(epd)
?GRangesList
head(split(epd, 1:length(epd)))
lst1 = split(epd, as.factor(epd))
lst1_names = sapply(lst1, function(x) x$name)
head(lst1_names)
class(lst1_names)
class(epd$name)
class(lst1_names$`chr1:895024-896023:+`)
class(lst1_names)
lst1 = GRangesList(lst1)
head(lst1)
lst1_names = sapply(lst1, function(x) x$name)
head(lst1_names)
class(x[1])
class(lst1[1])
lst1_names = sapply(lst1, function(x) x[["name"]])
lst1_names = sapply(lst1, function(x) x["name"])
lst1_names = sapply(lst1, function(x) mcols(x)[])dfas
mtcars["mpg"]
class(mtcars["mpg"])
lst1_names = sapply(lst1, function(x) mcols(x)[["name"]])
head(lst1_names)
lst1_names = unlist(lst1_names)
head(lst1_names)
all(lst1_names == epd$name)
sum(lst1_names == epd$name)
head(lst1_names == epd$name, 50)
head(lst1_names, 4)
head(epd)
class(lst1)
test = GRangesList(epd)
length(test)
test = GRangesList(epd, small)
length(test)
sapply(epd, length)
head(ranges(epd))
head(epd)
system.time({testtest = sapply(1:length(epd), function(x) epd[x])})
head(testtest)
testnames = sapply(testtest, function(x) x$name)
head(testnames)
class(testnames)
class(testtest)
class(testtest[1])
class(testtest[[1]])
all(testnames == epd$name)
system.time({testtest = GRangesList(sapply(1:length(epd), function(x) epd[x]))})
head(testtest)
system.time({testtesto = sapply(1:length(epd), function(x) epd[x])})
length(testtesto)
length(testtest)
system.time({testtestoc = GRangesList(testtesto)})
class(testtesto[1])
class(testtestoc[1])
class(testtestoc[[1]])
class(testtesto[[1]])
class(testtesto)
class(testtestoc)
rand = sample(small, 5000)
length(rand)
res = lapply(testtesto, function(x) intersect(x, randsystem.time({})))})
system.time({res = lapply(testtesto, function(x) intersect(x, rand))})
getwd()
devtools()
library(devtools)
document()
build()
library(devtools)
document()
document()
build()
q()
getwd()
dir.create(".")
rtracklayer::import.gtf("~/genomes/gencode/gencode_downloads/gencode.v38.primary_assembly.annotation.gtf")
x = rtracklayer::import.gff("~/genomes/gencode/gencode_downloads/gencode.v38.primary_assembly.annotation.gtf")
head(x)
